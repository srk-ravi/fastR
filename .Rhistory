# Integration analysis functions
integrate_fast_with_pmest <- function(fast_results, pmest_results, domain) {
integrated_result <- list(
cross_validation = list(),
complementary_assignments = list()
)
# Cross-validate assignments between FAST and PMEST
for (pmest_facet in names(pmest_results)) {
pmest_terms <- pmest_results[[pmest_facet]]
# Find corresponding FAST facets
corresponding_fast_facets <- find_corresponding_fast_facets(pmest_facet, fast_results)
for (fast_facet in names(corresponding_fast_facets)) {
fast_terms <- fast_results[[fast_facet]]
# Identify overlaps and complementary information
overlaps <- intersect(pmest_terms, fast_terms)
pmest_only <- setdiff(pmest_terms, fast_terms)
fast_only <- setdiff(fast_terms, pmest_terms)
if (length(overlaps) > 0) {
integrated_result$cross_validation[[paste0(pmest_facet, "_", fast_facet)]] <- overlaps
}
if (length(pmest_only) > 0) {
integrated_result$complementary_assignments[[paste0("pmest_", pmest_facet)]] <- pmest_only
}
if (length(fast_only) > 0) {
integrated_result$complementary_assignments[[paste0("fast_", fast_facet)]] <- fast_only
}
}
}
return(integrated_result)
}
find_corresponding_fast_facets <- function(pmest_facet, fast_results) {
correspondence_map <- list(
"personality" = c("topics", "personal_names", "corporate_names"),
"matter" = c("topics", "titles", "form_genre"),
"energy" = c("events", "meeting_names", "form_genre"),
"space" = c("geographic_names", "corporate_names"),
"time" = c("time_periods", "events")
)
corresponding_facets <- correspondence_map[[pmest_facet]]
return(fast_results[names(fast_results) %in% corresponding_facets])
}
calculate_integration_strength <- function(integrated_analysis) {
if (is.null(integrated_analysis) || length(integrated_analysis) == 0) {
return(0)
}
cross_validations <- length(unlist(integrated_analysis$cross_validation))
complementary <- length(unlist(integrated_analysis$complementary_assignments))
if (cross_validations + complementary == 0) {
return(0)
}
strength <- (cross_validations * 2 + complementary) / (cross_validations + complementary + 1)
return(round(strength, 3))
}
calculate_hybrid_confidence_scores <- function(fast_classification, pmest_classification, integrated_analysis) {
fast_confidence <- ifelse(length(unlist(fast_classification)) > 0, 0.85, 0)
pmest_confidence <- ifelse(length(unlist(pmest_classification)) > 0, 0.76, 0)
integration_confidence <- calculate_integration_strength(integrated_analysis)
scores <- list(
fast_confidence = fast_confidence,
pmest_confidence = pmest_confidence,
integration_confidence = integration_confidence
)
scores$overall_confidence <- mean(c(fast_confidence, pmest_confidence, integration_confidence))
scores$overall_confidence <- round(scores$overall_confidence, 3)
return(scores)
}
', file = "R/classification_functions.R")
cat('
# Helper function for null coalescing
`%||%` <- function(a, b) if (is.null(a)) b else a
#\' Classify Text using Hybrid FAST + PMEST Framework
#\'
#\' This function integrates OCLC FAST 9 facets with PMEST 5 facets for comprehensive classification
#\'
#\' @param title Character string containing the text to classify
#\' @param domain Domain for classification ("management" or "chemistry")
#\' @param use_fast_integration Logical indicating whether to use FAST integration (default: TRUE)
#\' @param confidence_threshold Numeric value for minimum confidence score (default: 0.5)
#\' @return Comprehensive classification result with both FAST and PMEST facets
#\' @export
#\' @examples
#\' result <- classify_fast_pmest_hybrid("Strategic Leadership in Digital Organizations", "management")
#\' print(result$metadata)
classify_fast_pmest_hybrid <- function(title, domain = "management",
use_fast_integration = TRUE, confidence_threshold = 0.5) {
if (is.null(title) || title == "" || is.na(title)) {
return(list())
}
# Initialize comprehensive result structure
result <- list(
text = title,
domain = domain,
# OCLC FAST 9 Facets Classification
fast_classification = list(),
# PMEST 5 Facets Classification
pmest_classification = list(),
# Integrated Analysis
integrated_analysis = list(
cross_validation = list(),
complementary_assignments = list(),
integration_strength = 0
),
# Confidence and Metadata
confidence_scores = list(),
metadata = list(
total_fast_assignments = 0,
total_pmest_assignments = 0,
total_integrated_assignments = 0,
overall_confidence = 0,
timestamp = Sys.time()
)
)
# Apply PMEST classification
pmest_taxonomy <- switch(domain,
"management" = management_pmest_taxonomy,
"chemistry" = chemistry_pmest_taxonomy,
stop("Unsupported domain for PMEST: ", domain)
)
result$pmest_classification <- classify_using_pmest_5_facets(title, pmest_taxonomy, confidence_threshold)
result$metadata$total_pmest_assignments <- length(unlist(result$pmest_classification))
# Apply FAST classification if enabled
if (use_fast_integration) {
fast_taxonomy <- switch(domain,
"management" = management_fast_9_facets,
"chemistry" = chemistry_fast_9_facets,
stop("Unsupported domain for FAST integration: ", domain)
)
result$fast_classification <- classify_using_fast_9_facets(title, fast_taxonomy, confidence_threshold)
result$metadata$total_fast_assignments <- length(unlist(result$fast_classification))
}
# Create integrated analysis
if (use_fast_integration) {
result$integrated_analysis <- integrate_fast_with_pmest(
result$fast_classification,
result$pmest_classification,
domain
)
result$metadata$total_integrated_assignments <-
length(unlist(result$integrated_analysis$cross_validation)) +
length(unlist(result$integrated_analysis$complementary_assignments))
result$integrated_analysis$integration_strength <- calculate_integration_strength(result$integrated_analysis)
}
# Calculate confidence scores
result$confidence_scores <- calculate_hybrid_confidence_scores(
result$fast_classification,
result$pmest_classification,
result$integrated_analysis
)
result$metadata$overall_confidence <- result$confidence_scores$overall_confidence
class(result) <- "fast_pmest_hybrid_result"
return(result)
}
#\' Classify using PMEST 5 Facets
#\'
#\' Internal function to apply PMEST classification
#\'
#\' @param title Text to classify
#\' @param pmest_taxonomy PMEST taxonomy for the domain
#\' @param confidence_threshold Minimum confidence threshold
#\' @return List with PMEST facet assignments
classify_using_pmest_5_facets <- function(title, pmest_taxonomy, confidence_threshold) {
title_lower <- tolower(title)
pmest_assignments <- list()
for (facet in names(pmest_taxonomy)) {
matched_terms <- c()
for (category in names(pmest_taxonomy[[facet]])) {
terms <- pmest_taxonomy[[facet]][[category]]
for (term in terms) {
if (detect_term_in_text(term, title_lower)) {
confidence <- calculate_pmest_term_confidence(term, title_lower, facet)
if (confidence >= confidence_threshold) {
matched_terms <- c(matched_terms, term)
}
}
}
}
if (length(matched_terms) > 0) {
pmest_assignments[[facet]] <- unique(matched_terms)
}
}
return(pmest_assignments)
}
#\' Classify using FAST 9 Facets
#\'
#\' Internal function to apply FAST 9 facets classification
#\'
#\' @param title Text to classify
#\' @param fast_taxonomy FAST taxonomy for the domain
#\' @param confidence_threshold Minimum confidence threshold
#\' @return List with FAST facet assignments
classify_using_fast_9_facets <- function(title, fast_taxonomy, confidence_threshold) {
title_lower <- tolower(title)
fast_assignments <- list()
for (facet in names(fast_taxonomy)) {
matched_terms <- c()
for (category in names(fast_taxonomy[[facet]])) {
terms <- fast_taxonomy[[facet]][[category]]
for (term in terms) {
if (detect_term_in_text(term, title_lower)) {
confidence <- calculate_fast_term_confidence(term, title_lower, facet)
if (confidence >= confidence_threshold) {
matched_terms <- c(matched_terms, term)
}
}
}
}
if (length(matched_terms) > 0) {
fast_assignments[[facet]] <- unique(matched_terms)
}
}
return(fast_assignments)
}
# Helper function to detect term in text with multiple patterns
detect_term_in_text <- function(term, text) {
patterns <- c(
paste0("\\\\b", tolower(term), "\\\\b"),
paste0("\\\\b", tolower(term), "s\\\\b"),
paste0("\\\\b", gsub(" ", "-", tolower(term)), "\\\\b"),
paste0("\\\\b", gsub(" ", "_", tolower(term)), "\\\\b")
)
return(any(sapply(patterns, function(p) grepl(p, text))))
}
# Calculate confidence for FAST terms (higher due to authority control)
calculate_fast_term_confidence <- function(term, text, facet) {
base_confidence <- 0.85  # Higher for FAST authority
if (nchar(term) > 15) base_confidence <- base_confidence + 0.05
if (grepl(" ", term)) base_confidence <- base_confidence + 0.05
if (facet %in% c("topics", "corporate_names")) base_confidence <- base_confidence + 0.03
return(min(0.95, base_confidence))
}
# Calculate confidence for PMEST terms
calculate_pmest_term_confidence <- function(term, text, facet) {
base_confidence <- 0.76
facet_weights <- c("personality" = 1.0, "matter" = 0.9, "energy" = 1.0, "space" = 0.8, "time" = 0.7)
if (facet %in% names(facet_weights)) {
base_confidence <- base_confidence * facet_weights[[facet]]
}
if (nchar(term) > 10) base_confidence <- base_confidence + 0.05
return(min(0.95, max(0.5, base_confidence)))
}
# Integration analysis functions
integrate_fast_with_pmest <- function(fast_results, pmest_results, domain) {
integrated_result <- list(
cross_validation = list(),
complementary_assignments = list()
)
# Cross-validate assignments between FAST and PMEST
for (pmest_facet in names(pmest_results)) {
pmest_terms <- pmest_results[[pmest_facet]]
# Find corresponding FAST facets
corresponding_fast_facets <- find_corresponding_fast_facets(pmest_facet, fast_results)
for (fast_facet in names(corresponding_fast_facets)) {
fast_terms <- fast_results[[fast_facet]]
# Identify overlaps and complementary information
overlaps <- intersect(pmest_terms, fast_terms)
pmest_only <- setdiff(pmest_terms, fast_terms)
fast_only <- setdiff(fast_terms, pmest_terms)
if (length(overlaps) > 0) {
integrated_result$cross_validation[[paste0(pmest_facet, "_", fast_facet)]] <- overlaps
}
if (length(pmest_only) > 0) {
integrated_result$complementary_assignments[[paste0("pmest_", pmest_facet)]] <- pmest_only
}
if (length(fast_only) > 0) {
integrated_result$complementary_assignments[[paste0("fast_", fast_facet)]] <- fast_only
}
}
}
return(integrated_result)
}
find_corresponding_fast_facets <- function(pmest_facet, fast_results) {
correspondence_map <- list(
"personality" = c("topics", "personal_names", "corporate_names"),
"matter" = c("topics", "titles", "form_genre"),
"energy" = c("events", "meeting_names", "form_genre"),
"space" = c("geographic_names", "corporate_names"),
"time" = c("time_periods", "events")
)
corresponding_facets <- correspondence_map[[pmest_facet]]
return(fast_results[names(fast_results) %in% corresponding_facets])
}
calculate_integration_strength <- function(integrated_analysis) {
if (is.null(integrated_analysis) || length(integrated_analysis) == 0) {
return(0)
}
cross_validations <- length(unlist(integrated_analysis$cross_validation))
complementary <- length(unlist(integrated_analysis$complementary_assignments))
if (cross_validations + complementary == 0) {
return(0)
}
strength <- (cross_validations * 2 + complementary) / (cross_validations + complementary + 1)
return(round(strength, 3))
}
calculate_hybrid_confidence_scores <- function(fast_classification, pmest_classification, integrated_analysis) {
fast_confidence <- ifelse(length(unlist(fast_classification)) > 0, 0.85, 0)
pmest_confidence <- ifelse(length(unlist(pmest_classification)) > 0, 0.76, 0)
integration_confidence <- calculate_integration_strength(integrated_analysis)
scores <- list(
fast_confidence = fast_confidence,
pmest_confidence = pmest_confidence,
integration_confidence = integration_confidence
)
scores$overall_confidence <- mean(c(fast_confidence, pmest_confidence, integration_confidence))
scores$overall_confidence <- round(scores$overall_confidence, 3)
return(scores)
}
', file = "R/classification_functions.R")
cat('
#\' Multi-Domain Corpus Analysis with FAST + PMEST Integration
#\'
#\' Enhanced corpus analysis incorporating both FAST and PMEST frameworks
#\'
#\' @param corpus_data Data frame containing the corpus
#\' @param title_column Column name containing titles
#\' @param domain_column Column name containing domain labels
#\' @param domains Vector of domains to analyze
#\' @param use_fast_integration Whether to use FAST integration
#\' @param progress Whether to show progress
#\' @return Enhanced analysis results with FAST + PMEST integration
#\' @export
analyze_multidomain_corpus_enhanced <- function(corpus_data, title_column, domain_column,
domains = c("management", "chemistry"),
use_fast_integration = TRUE, progress = TRUE) {
if (!title_column %in% colnames(corpus_data)) {
stop(paste("Column", title_column, "not found in corpus_data"))
}
if (!domain_column %in% colnames(corpus_data)) {
stop(paste("Column", domain_column, "not found in corpus_data"))
}
results <- list()
for (domain in domains) {
if (progress) {
cat(sprintf("Processing %s domain with FAST + PMEST integration...\\n", domain))
}
# Filter data for current domain
domain_data <- corpus_data[corpus_data[[domain_column]] == domain, ]
domain_titles <- domain_data[[title_column]]
# Remove NA or empty titles
domain_titles <- domain_titles[!is.na(domain_titles) & domain_titles != ""]
if (length(domain_titles) == 0) {
if (progress) {
cat(sprintf("No titles found for %s domain\\n", domain))
}
results[[domain]] <- list()
next
}
if (progress) {
cat(sprintf("Found %d titles for %s domain\\n", length(domain_titles), domain))
}
# Process each title with enhanced classification
domain_results <- list()
for (i in seq_along(domain_titles)) {
if (progress && i %% 100 == 0) {
cat(sprintf("  Processed %d/%d titles\\n", i, length(domain_titles)))
}
title <- domain_titles[i]
# Apply hybrid FAST + PMEST classification
classification <- classify_fast_pmest_hybrid(
title = title,
domain = domain,
use_fast_integration = use_fast_integration,
confidence_threshold = 0.5
)
domain_results[[i]] <- classification
}
results[[domain]] <- domain_results
if (progress) {
cat(sprintf("✓ %s domain complete: %d titles processed\\n\\n", domain, length(domain_results)))
}
}
# Add comprehensive metadata
attr(results, "total_titles") <- sum(sapply(results, length))
attr(results, "domains_analyzed") <- domains
attr(results, "fast_integration_used") <- use_fast_integration
attr(results, "analysis_timestamp") <- Sys.time()
attr(results, "framework") <- "FAST_9_Facets + PMEST_5_Facets"
class(results) <- "fast_pmest_enhanced_results"
return(results)
}
#\' Generate Summary Statistics
#\'
#\' Creates comprehensive summary statistics from analysis results
#\'
#\' @param analysis_results Results from analyze_multidomain_corpus_enhanced()
#\' @return Data frame with summary statistics
#\' @export
generate_summary_statistics <- function(analysis_results) {
if (!inherits(analysis_results, "fast_pmest_enhanced_results")) {
stop("analysis_results must be output from analyze_multidomain_corpus_enhanced()")
}
summary_stats <- data.frame()
for (domain in names(analysis_results)) {
domain_data <- analysis_results[[domain]]
if (length(domain_data) > 0) {
total_titles <- length(domain_data)
total_fast <- sum(sapply(domain_data, function(x) x$metadata$total_fast_assignments))
total_pmest <- sum(sapply(domain_data, function(x) x$metadata$total_pmest_assignments))
total_integrated <- sum(sapply(domain_data, function(x) x$metadata$total_integrated_assignments))
avg_confidence <- mean(sapply(domain_data, function(x) x$metadata$overall_confidence))
classification_rate <- sum(sapply(domain_data, function(x)
(x$metadata$total_fast_assignments + x$metadata$total_pmest_assignments) > 0)) / total_titles * 100
summary_stats <- rbind(summary_stats, data.frame(
Domain = domain,
Total_Titles = total_titles,
FAST_Assignments = total_fast,
PMEST_Assignments = total_pmest,
Integrated_Assignments = total_integrated,
Average_Confidence = round(avg_confidence, 3),
Classification_Rate_Percent = round(classification_rate, 1),
stringsAsFactors = FALSE
))
}
}
return(summary_stats)
}
#\' Export Enhanced FAST + PMEST Results
#\'
#\' Export comprehensive results including both FAST and PMEST classifications
#\'
#\' @param analysis_results Results from analyze_multidomain_corpus_enhanced()
#\' @param base_filename Base filename for exports
#\' @param output_dir Output directory
#\' @return List of created files
#\' @export
export_enhanced_fast_pmest_results <- function(analysis_results, base_filename = "fast_pmest_analysis",
output_dir = getwd()) {
if (!inherits(analysis_results, "fast_pmest_enhanced_results")) {
stop("analysis_results must be output from analyze_multidomain_corpus_enhanced()")
}
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
created_files <- list()
# Export comprehensive results
comprehensive_results <- data.frame()
for (domain in names(analysis_results)) {
domain_data <- analysis_results[[domain]]
for (i in seq_along(domain_data)) {
result <- domain_data[[i]]
# Format FAST classifications
fast_summary <- ""
if (length(result$fast_classification) > 0) {
fast_parts <- sapply(names(result$fast_classification), function(facet) {
terms <- result$fast_classification[[facet]]
if (length(terms) > 0) {
paste0("FAST_", toupper(facet), ":", paste(terms, collapse = ";"))
}
})
fast_summary <- paste(fast_parts[fast_parts != ""], collapse = " | ")
}
# Format PMEST classifications
pmest_summary <- ""
if (length(result$pmest_classification) > 0) {
pmest_parts <- sapply(names(result$pmest_classification), function(facet) {
terms <- result$pmest_classification[[facet]]
if (length(terms) > 0) {
paste0("PMEST_", toupper(facet), ":", paste(terms, collapse = ";"))
}
})
pmest_summary <- paste(pmest_parts[pmest_parts != ""], collapse = " | ")
}
comprehensive_results <- rbind(comprehensive_results, data.frame(
Title_ID = i,
Domain = domain,
Title = substr(result$text, 1, 200),
FAST_Classifications = fast_summary,
PMEST_Classifications = pmest_summary,
FAST_Assignments = result$metadata$total_fast_assignments,
PMEST_Assignments = result$metadata$total_pmest_assignments,
Integration_Strength = result$integrated_analysis$integration_strength,
Overall_Confidence = result$metadata$overall_confidence,
stringsAsFactors = FALSE
))
}
}
# Export comprehensive results
main_filename <- file.path(output_dir, paste0(base_filename, "_comprehensive_", timestamp, ".csv"))
write.csv(comprehensive_results, main_filename, row.names = FALSE)
created_files$comprehensive_results <- main_filename
# Export summary statistics
summary_stats <- generate_summary_statistics(analysis_results)
summary_filename <- file.path(output_dir, paste0(base_filename, "_summary_", timestamp, ".csv"))
write.csv(summary_stats, summary_filename, row.names = FALSE)
created_files$summary_statistics <- summary_filename
cat("✓ Enhanced FAST + PMEST export complete!\\n")
cat("Framework: OCLC FAST 9 Facets + Ranganathan PMEST 5 Facets\\n")
cat("Total facets analyzed: 14 (9 FAST + 5 PMEST)\\n")
for (file_type in names(created_files)) {
cat(sprintf("  %s: %s\\n", file_type, created_files[[file_type]]))
}
return(created_files)
}
', file = "R/analysis_functions.R")
cat('# fastR Package: PMEST + OCLC FAST Integration
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![R Package](https://img.shields.io/badge/R%20Package-v1.0.0-blue.svg)](https://www.r-project.org/)
An advanced R package for automated subject classification combining Ranganathan\'s PMEST framework with OCLC FAST 9 facets for comprehensive, authority-controlled subject analysis.
## 🌟 Key Features
### 🔗 **Dual Framework Integration**
- **PMEST 5 Facets**: Personality, Matter, Energy, Space, Time
- **OCLC FAST 9 Facets**: Topics, Geographic Names, Personal Names, Corporate Names, Form/Genre, Time Periods, Titles, Events, Meeting Names
- **14 Total Dimensions**: Unprecedented classification depth and precision
### 🌍 **Multi-Domain Support**
- **Management**: Business, strategy, organization, leadership
- **Chemistry**: Organic, inorganic, analytical, physical chemistry
- **Extensible**: Framework easily adaptable to new domains
### 🎯 **Authority Control**
- **OCLC FAST**: Standardized, internationally recognized terminology
- **Cross-Validation**: Terms validated across both frameworks
- **Institutional Compatibility**: Works with WorldCat and library systems
## 📦 Installation
